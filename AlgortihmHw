#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <sstream>
#include <stack>
#include <algorithm>

using namespace std;

int ifexists(vector < vector<int > > *, pair <int,int> * );

int main(int argc, char** argv)
{
	if (argc < 2)
	{
		std::cerr << "Error" << std::endl;
        	return 1;
	}
	char* f_name = argv[1];		
	fstream file;	
	file.open(f_name);
	int birincininstatesayisi;file >> birincininstatesayisi;
	int birincininsembolsayisi;file >> birincininsembolsayisi;
	int birinciinitialstateler;file >> birinciinitialstateler;
	vector <int> finalstateler;
	int finalstateler_1;
	string dummy;
	std::getline (file,dummy); 
	std::getline (file,dummy);
	std::stringstream ss;
	std::string input = dummy;ss << input;
	int t;
	std::string tmp;
	while(std::getline(ss, tmp,' ')) {
		if(std::stringstream(tmp)>>t)
		{
			finalstateler.push_back(t);
		}
	}
	vector<int> vc; 
	vector<vector<int> > statelerim1;
	int states_1;
	for (int i = 0; i < birincininstatesayisi; ++i)
	{
		for (int j = 0; j < birincininsembolsayisi; ++j){
				file >> states_1;
				vc.push_back(states_1); 
		}
		statelerim1.push_back(vc);
		vc.clear();
	}

	file.close();f_name = argv[2];	file.open(f_name);
	int ikincininstatesayisi;file >> ikincininstatesayisi;
	int ikincininsembolsayisi;file >> ikincininsembolsayisi;
	int vc2;file >> vc2;
	vector <int> finalstateler2;
	int finalstateler_2;
	string dummy2;
	std::getline (file,dummy2); 
	std::getline (file,dummy2);
	std::stringstream sss;
	std::string input2 = dummy2;	
	sss << input2;
	int t2;
	std::string tmp2;
	while(std::getline(sss, tmp2,' ')) {
		if(std::stringstream(tmp2)>>t2)
		{
			finalstateler.push_back(t2);
		}
	}
	vector<int> arcsInOrder_2; 
	vector<vector<int> > StatesVector_2;
	int states_2;
	for (int i = 0; i < ikincininstatesayisi; ++i)
	{
		for (int j = 0; j < ikincininsembolsayisi; ++j){
				file >> states_2;
				arcsInOrder_2.push_back(states_2); 
		}
		StatesVector_2.push_back(arcsInOrder_2);
		arcsInOrder_2.clear();
	}
	if(birincininsembolsayisi!=ikincininsembolsayisi) {cout << "notequal" << endl; return 0;}
	
	vector < vector<int > > sets;
	int numberOfAllStates;
	numberOfAllStates = birincininstatesayisi+ikincininstatesayisi;
	sets.resize(numberOfAllStates);
	for (int i = 0; i < numberOfAllStates;i++)
	{
		sets[i].push_back(i);
	}
	stack<pair<int, int> > stagim;
	pair<int, int> initialStates;
	initialStates.first = birinciinitialstateler;
	initialStates.second = vc2 + birincininstatesayisi;
	
	sets[birinciinitialstateler].push_back(initialStates.second);
	sets[initialStates.second][0]=-1;
	stagim.push(initialStates);
	while(true)
	{
		if (stagim.empty()) break;
		pair<int, int> cikan = stagim.top();
		stagim.pop();
		pair<int, int> sonrakiCift;
		for (int i = 0; i< birincininsembolsayisi;i++)
		{
			sonrakiCift = make_pair(statelerim1[cikan.first][i],StatesVector_2[cikan.second- birincininstatesayisi][i]+birincininstatesayisi);
			if (!ifexists(&sets,&sonrakiCift)) {stagim.push(sonrakiCift);
			}
		}
	}
	bool f,f2,f3;
	for (int i = 0; i< sets.size();i++)
	{
		f=f2=f3=0;
		for (int j=0;j<sets[i].size();j++)
		{
			if (f && f2) 
			{
				cout << "notequal" << endl; 
				return 0;
			}
			f3 = 0;
			for (int k = 0;k<finalstateler.size();k++)
			{
				if (sets[i][j] == finalstateler[k])
					f3=true;
			}
			if (f3==true) f = true;
			if (f3==false) f2=true;
		}
	}
	for (int i = 0; i< sets.size();i++)
	{
		f=f2=f3=0;
		for (int j=0;j<sets[i].size();j++)
		{
			if (f && f2) 
			{
			}
			f3 = 0;
			for (int k = 0;k<finalstateler.size();k++)
			{
				if (sets[i][j] == finalstateler[k])
					f3=true;
			}
			if (f3==true) f = true;
			if (f3==false) f2=true;
		}
	}
	for (int i = 0; i< sets.size();i++)
	{
		f=f2=f3=0;
		for (int j=0;j<sets[i].size();j++)
		{
			if (f && f2) 
			{
			}
			f3 = 0;
			for (int k = 0;k<finalstateler.size();k++)
			{
				if (sets[i][j] == finalstateler[k])
					f3=true;
			}
			if (f3==true) f = true;
			if (f3==false) f2=true;
		}
	}
	for (int i = 0; i< sets.size();i++)
	{
		f=f2=f3=0;
		for (int j=0;j<sets[i].size();j++)
		{
			if (f && f2) 
			{
			}
			f3 = 0;
			for (int k = 0;k<finalstateler.size();k++)
			{
				if (sets[i][j] == finalstateler[k])
					f3=true;
			}
			if (f3==true) f = true;
			if (f3==false) f2=true;
		}
	}
	cout << "equal" << endl;
	return 0;
}

int ifexists(vector < vector<int > > *vectorum, pair <int,int> *pairim )
{
	int a,b,c,d;
	for (int i = 0; i< vectorum->size();i++)
	{
		for (int j=0;j<(*vectorum)[i].size();j++)
		{
			if((*vectorum)[i][j] == pairim->first)
			{
				a=i;c=j;
			}
			if((*vectorum)[i][j] == pairim->second) 
			{
				b=i;d=j;
			}			
		}

	}
	if (a==b) {return true;}
	
	if((*vectorum)[a].size() == 1 && (*vectorum)[b].size() == 1)
	{
		vector<int> dummy;
		dummy.push_back((*pairim).first);
		dummy.push_back((*pairim).second);
		(*vectorum)[a][0] = -1;
		(*vectorum)[b][0] = -1;
		(*vectorum).push_back(dummy);
	}
	else
	{
		if((*vectorum)[a].size() != 1 && (*vectorum)[b].size() == 1)
		{
			(*vectorum)[a].push_back((*vectorum)[b][0]);
			(*vectorum)[b][0] = -1;
		}
		else 
		{
			if ((*vectorum)[a].size() == 1 && (*vectorum)[b].size() != 1)
			{
				(*vectorum)[b].push_back((*vectorum)[a][0]);
				(*vectorum)[a][0] = -1;
			}
			else
			{
				(*vectorum)[b].push_back((*vectorum)[a][c]);
				(*vectorum)[a].push_back((*vectorum)[b][d]);
			}}}
	return false;	
}
